<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<!-- Method Documentation URL: https://mandrillapp.com/api/docs/messages.JSON.html#method=send -->
<template name="sendMessage" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="html" description="The full HTML content to be sent."/>
    <parameter name="text" description="Optional full text content to be sent."/>
    <parameter name="subject" description="The message subject."/>
    <parameter name="fromEmail" description="The sender email address."/>
    <parameter name="fromName" description="Optional from name to be used."/>
    <parameter name="important"
               description="Whether or not this message is important, and should be delivered ahead of non-important messages."/>
    <parameter name="trackOpens" description="Whether or not to turn on open tracking for the message."/>
    <parameter name="trackClicks" description="Whether or not to turn on click tracking for the message."/>
    <parameter name="autoText"
               description="Whether or not to automatically generate a text part for messages that are not given text."/>
    <parameter name="autoHtml"
               description="Whether or not to automatically generate an HTML part for messages that are not given HTML."/>
    <parameter name="inlineCss"
               description="Whether or not to automatically inline all CSS styles provided in the message HTML - only for HTML documents less than 256KB in size."/>
    <parameter name="urlStripQs"
               description="Whether or not to strip the query string from URLs when aggregating tracked URL data."/>
    <parameter name="preserveRecipients"
               description="Whether or not to expose all recipients in to 'To' header for each email."/>
    <parameter name="viewContentLink" description="Set to false to remove content logging for sensitive emails."/>
    <parameter name="bccAddress"
               description="An optional address to receive an exact copy of each recipient's email email."/>
    <parameter name="trackingDomain"
               description="A custom domain to use for tracking opens and clicks instead of mandrillapp.com."/>
    <parameter name="signingDomain"
               description="A custom domain to use for SPF/DKIM signing instead of mandrill (for 'via' or 'on behalf of' in email clients)."/>
    <parameter name="returnPathDomain" description="A custom domain to use for the messages's return-path."/>
    <parameter name="merge"
               description="Whether to evaluate merge tags in the message. Will automatically be set to true if either merge_vars or global_merge_vars are provided."/>
    <parameter name="mergeLanguage"
               description="The merge tag language to use when evaluating merge tags, either mailchimp or handlebars one of(mailchimp, handlebars)."/>
    <parameter name="subAccount"
               description="The unique id of a subaccount for this message - must already exist or will fail with an error."/>
    <parameter name="async" description="Enable a background sending mode that is optimized for bulk sending."/>
    <parameter name="ipPool" description="The name of the dedicated ip pool that should be used to send the message."/>
    <parameter name="sendAt"
               description="When this message should be sent as a UTC timestamp in YYYY-MM-DD HH:MM:SS format."/>
    <parameter name="to" description="An array of recipient information."/>
    <parameter name="headers" description="Optional extra headers to add to the message (most headers are allowed)."/>
    <parameter name="globalMergeVars"
               description="Global merge variables to use for all recipients. You can override these per recipient."/>
    <parameter name="mergeVars"
               description="Per-recipient merge variables, which override global merge variables with the same name."/>
    <parameter name="tags" description="An array of string to tag the message with."/>
    <parameter name="googleAnalyticsDomains"
               description="An array of strings indicating for which any matching URLs will automatically have Google Analytics parameters appended to their query string automatically."/>
    <parameter name="googleAnalyticsCampaign"
               description="Optional string indicating the value to set for the utm_campaign tracking parameter. If this isn't provided the email's from address will be used instead."/>
    <parameter name="metadata" description="Metadata an associative array of user metadata."/>
    <parameter name="recipientMetadata"
               description="Per-recipient metadata that will override the global values specified in the metadata parameter."/>
    <parameter name="attachments" description="An array of supported attachments to add to the message."/>
    <parameter name="images" description="An array of embedded images to add to the message."/>
    <sequence>
        <property name="uri.var.html" expression="$func:html"/>
        <property name="uri.var.text" expression="$func:text"/>
        <property name="uri.var.subject" expression="$func:subject"/>
        <property name="uri.var.fromEmail" expression="$func:fromEmail"/>
        <property name="uri.var.fromName" expression="$func:fromName"/>
        <property name="uri.var.important" expression="$func:important"/>
        <property name="uri.var.trackOpens" expression="$func:trackOpens"/>
        <property name="uri.var.trackClicks" expression="$func:trackClicks"/>
        <property name="uri.var.autoText" expression="$func:autoText"/>
        <property name="uri.var.autoHtml" expression="$func:autoHtml"/>
        <property name="uri.var.inlineCss" expression="$func:inlineCss"/>
        <property name="uri.var.urlStripQs" expression="$func:urlStripQs"/>
        <property name="uri.var.preserveRecipients" expression="$func:preserveRecipients"/>
        <property name="uri.var.viewContentLink" expression="$func:viewContentLink"/>
        <property name="uri.var.bccAddress" expression="$func:bccAddress"/>
        <property name="uri.var.trackingDomain" expression="$func:trackingDomain"/>
        <property name="uri.var.signingDomain" expression="$func:signingDomain"/>
        <property name="uri.var.returnPathDomain" expression="$func:returnPathDomain"/>
        <property name="uri.var.merge" expression="$func:merge"/>
        <property name="uri.var.mergeLanguage" expression="$func:mergeLanguage"/>
        <property name="uri.var.subAccount" expression="$func:subAccount"/>
        <property name="uri.var.async" expression="$func:async"/>
        <property name="uri.var.ipPool" expression="$func:ipPool"/>
        <property name="uri.var.sendAt" expression="$func:sendAt"/>
        <property name="uri.var.to" expression="$func:to"/>
        <property name="uri.var.headers" expression="$func:headers"/>
        <property name="uri.var.globalMergeVars" expression="$func:globalMergeVars"/>
        <property name="uri.var.mergeVars" expression="$func:mergeVars"/>
        <property name="uri.var.tags" expression="$func:tags"/>
        <property name="uri.var.googleAnalyticsDomains" expression="$func:googleAnalyticsDomains"/>
        <property name="uri.var.googleAnalyticsCampaign" expression="$func:googleAnalyticsCampaign"/>
        <property name="uri.var.metadata" expression="$func:metadata"/>
        <property name="uri.var.recipientMetadata" expression="$func:recipientMetadata"/>
        <property name="uri.var.attachments" expression="$func:attachments"/>
        <property name="uri.var.images" expression="$func:images"/>
        <payloadFactory media-type="json">
            <format>
                {
                "key": "$1"
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.apiKey')"/>
            </args>
        </payloadFactory>
        <script language="js">
            <![CDATA[
            var jsonPayload = mc.getPayloadJSON();            
            var async = mc.getProperty('uri.var.async');
            var attachments = mc.getProperty('uri.var.attachments');
            var autoHtml = mc.getProperty('uri.var.autoHtml');
            var autoText = mc.getProperty('uri.var.autoText');
            var bccAddress = mc.getProperty('uri.var.bccAddress');
            var fromEmail = mc.getProperty('uri.var.fromEmail');
            var fromName = mc.getProperty('uri.var.fromName');
            var globalMergeVars = mc.getProperty('uri.var.globalMergeVars');
            var googleAnalyticsCampaign = mc.getProperty('uri.var.googleAnalyticsCampaign');
            var googleAnalyticsDomains = mc.getProperty('uri.var.googleAnalyticsDomains');
            var headers = mc.getProperty('uri.var.headers');
            var html = mc.getProperty('uri.var.html');
            var images = mc.getProperty('uri.var.images');
            var important = mc.getProperty('uri.var.important');
            var inlineCss = mc.getProperty('uri.var.inlineCss');
            var ipPool = mc.getProperty('uri.var.ipPool');
            var merge = mc.getProperty('uri.var.merge');
            var mergeLanguage = mc.getProperty('uri.var.mergeLanguage');
            var mergeVars = mc.getProperty('uri.var.mergeVars');
            var metadata = mc.getProperty('uri.var.metadata');
            var preserveRecipients = mc.getProperty('uri.var.preserveRecipients');
            var recipientMetadata = mc.getProperty('uri.var.recipientMetadata');
            var returnPathDomain = mc.getProperty('uri.var.returnPathDomain');
            var sendAt = mc.getProperty('uri.var.sendAt');
            var signingDomain = mc.getProperty('uri.var.signingDomain');
            var subAccount = mc.getProperty('uri.var.subAccount');
            var subject = mc.getProperty('uri.var.subject');
            var tags = mc.getProperty('uri.var.tags');
            var text = mc.getProperty('uri.var.text');
            var to = mc.getProperty('uri.var.to');
            var trackClicks = mc.getProperty('uri.var.trackClicks');
            var trackOpens = mc.getProperty('uri.var.trackOpens');
            var trackingDomain = mc.getProperty('uri.var.trackingDomain');
            var urlStripQs = mc.getProperty('uri.var.urlStripQs');
            var viewContentLink = mc.getProperty('uri.var.viewContentLink');           
            if (async != null && async != ""){
               jsonPayload.async = async;
            }            
            if (ipPool != null && ipPool != ""){
               jsonPayload.ip_pool = ipPool;
            }            
            var message = new Object();
            if (attachments != null && attachments != ""){
               message.attachments = eval("(" + attachments + ")");
            }            
            if (autoHtml != null && autoHtml != ""){
               message.auto_html = autoHtml;
            }            
            if (autoText != null && autoText != ""){
               message.auto_text = autoText;
            }            
            if (bccAddress != null && bccAddress != ""){
               message.bcc_address = bccAddress;
            }            
            if (fromEmail != null && fromEmail != ""){
               message.from_email = fromEmail;
            }            
            if (fromName != null && fromName != ""){
               message.from_name = fromName;
            }            
            if (globalMergeVars != null && globalMergeVars != ""){
               message.global_merge_vars = eval("(" + globalMergeVars + ")");
            }            
            if (googleAnalyticsCampaign != null && googleAnalyticsCampaign != ""){
               message.google_analytics_campaign = eval("(" + googleAnalyticsCampaign + ")");
            }            
            if (googleAnalyticsDomains != null && googleAnalyticsDomains != ""){
               message.google_analytics_domains = eval("(" + googleAnalyticsDomains + ")");
            }            
            if (headers != null && headers != ""){
               message.headers = eval("(" + headers + ")");
            }            
            if (html != null && html != ""){
               message.html = html;
            }            
            if (images != null && images != ""){
               message.images = eval("(" + images + ")");
            }            
            if (important != null && important != ""){
               message.important = important;
            }            
            if (inlineCss != null && inlineCss != ""){
               message.inline_css = inlineCss;
            }            
            if (merge != null && merge != ""){
               message.merge = merge;
            }            
            if (mergeLanguage != null && mergeLanguage != ""){
               message.merge_language = mergeLanguage;
            }            
            if (mergeVars != null && mergeVars != ""){
               message.merge_vars = eval("(" + mergeVars + ")");
            }            
            if (metadata != null && metadata != ""){
               message.metadata = eval("(" + metadata + ")");
            }            
            if (preserveRecipients != null && preserveRecipients != ""){
               message.preserve_recipients = preserveRecipients;
            }            
            if (recipientMetadata != null && recipientMetadata != ""){
               message.recipient_metadata = eval("(" + recipientMetadata + ")");
            }            
            if (returnPathDomain != null && returnPathDomain != ""){
               message.return_path_domain = returnPathDomain;
            }            
            if (signingDomain != null && signingDomain != ""){
               message.signing_domain = signingDomain;
            }            
            if (subAccount != null && subAccount != ""){
               message.subaccount = subAccount;
            }            
            if (subject != null && subject != ""){
               message.subject = subject;
            }            
            if (tags != null && tags != ""){
               message.tags = eval("(" + tags + ")");
            }            
            if (text != null && text != ""){
               message.text = text;
            }            
            if (to != null && to != ""){
               message.to = eval("(" + to + ")");
            }            
            if (trackClicks != null && trackClicks != ""){
               message.track_clicks = trackClicks;
            }            
            if (trackOpens != null && trackOpens != ""){
               message.track_opens = trackOpens;
            }            
            if (trackingDomain != null && trackingDomain != ""){
               message.tracking_domain = trackingDomain;
            }            
            if (urlStripQs != null && urlStripQs != ""){
               message.url_strip_qs = urlStripQs;
            }            
            if (viewContentLink != null && viewContentLink != ""){
               message.view_content_link = viewContentLink;
            }            
            jsonPayload.message = message;
            
            if (sendAt != null && sendAt != ""){
               jsonPayload.send_at = sendAt;
            }            
            mc.setPayloadJSON(jsonPayload);
         ]]>
        </script>
        <!--Mandrill API expects Content-Length Header -->
        <property name="DISABLE_CHUNKING" value="true" scope="axis2"/>
        <call>
            <endpoint>
                <http method="post" uri-template="{uri.var.apiUrl}/messages/send.{uri.var.format}"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="Access-Control-Allow-Credentials" action="remove" scope="transport"/>
        <header name="Access-Control-Allow-Headers" action="remove" scope="transport"/>
        <header name="Access-Control-Allow-Methods" action="remove" scope="transport"/>
        <header name="Access-Control-Allow-Origin" action="remove" scope="transport"/>
        <header name="Vary" action="remove" scope="transport"/>
    </sequence>
</template>